version: '3.8'

services:
  # Main REV application
  rev-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: rev-api
    ports:
      - "8000:8000"  # FastAPI
      - "8001:8001"  # WebSocket
      - "9090:9090"  # Prometheus metrics
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_JSON=true
      - ENABLE_PROMETHEUS=true
      - ENABLE_TRACING=true
      - OTLP_ENDPOINT=jaeger:4317
      - LOGSTASH_HOST=logstash
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ../models:/app/models
      - ../data:/app/data
      - ../outputs:/app/outputs
      - ../experiments:/app/experiments
    depends_on:
      - redis
      - postgres
      - elasticsearch
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - rev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: rev-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - rev-network
    restart: unless-stopped

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: rev-postgres
    environment:
      - POSTGRES_USER=rev
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=rev_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rev-network
    restart: unless-stopped

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: rev-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - rev-network
    restart: unless-stopped

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: rev-logstash
    ports:
      - "5959:5959"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - rev-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: rev-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - rev-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rev-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - rev-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rev-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - rev-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rev-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - rev-network
    restart: unless-stopped

  # MLflow for experiment tracking
  mlflow:
    build:
      context: .
      dockerfile: mlflow/Dockerfile
    container_name: rev-mlflow
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://rev:${POSTGRES_PASSWORD}@postgres/rev_db
      - ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - rev-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: rev-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - rev-api
      - grafana
      - kibana
    networks:
      - rev-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  mlflow-data:

networks:
  rev-network:
    driver: bridge