---
# REV Secrets Template
# IMPORTANT: This is a template file. Replace <BASE64_ENCODED_VALUE> with actual base64-encoded secrets before applying.
# To encode a secret: echo -n "your-secret-value" | base64
apiVersion: v1
kind: Secret
metadata:
  name: rev-secrets
  namespace: rev
  labels:
    app: rev
    component: secrets
    tier: security
type: Opaque
data:
  # API Keys and Authentication
  rev_api_key: <BASE64_ENCODED_REV_API_KEY>
  api_secret: <BASE64_ENCODED_API_SECRET>
  jwt_secret: <BASE64_ENCODED_JWT_SECRET>
  
  # Consensus and Validator Keys
  consensus_key: <BASE64_ENCODED_CONSENSUS_KEY>
  validator_keys: <BASE64_ENCODED_VALIDATOR_KEYS>
  
  # Database Credentials
  redis_password: <BASE64_ENCODED_REDIS_PASSWORD>
  postgres_username: <BASE64_ENCODED_POSTGRES_USERNAME>
  postgres_password: <BASE64_ENCODED_POSTGRES_PASSWORD>
  
  # External API Keys
  openai_api_key: <BASE64_ENCODED_OPENAI_API_KEY>
  anthropic_api_key: <BASE64_ENCODED_ANTHROPIC_API_KEY>
  cohere_api_key: <BASE64_ENCODED_COHERE_API_KEY>
  huggingface_api_key: <BASE64_ENCODED_HUGGINGFACE_API_KEY>
  
  # Monitoring and Observability
  prometheus_admin_password: <BASE64_ENCODED_PROMETHEUS_ADMIN_PASSWORD>
  grafana_admin_password: <BASE64_ENCODED_GRAFANA_ADMIN_PASSWORD>
  jaeger_auth_token: <BASE64_ENCODED_JAEGER_AUTH_TOKEN>

---
# TLS Certificates Secret
apiVersion: v1
kind: Secret
metadata:
  name: tls-certs
  namespace: rev
  labels:
    app: rev
    component: certificates
    tier: security
type: kubernetes.io/tls
data:
  # TLS Certificate and Private Key (Base64 encoded)
  tls.crt: <BASE64_ENCODED_TLS_CERTIFICATE>
  tls.key: <BASE64_ENCODED_TLS_PRIVATE_KEY>
  ca.crt: <BASE64_ENCODED_CA_CERTIFICATE>

---
# Database Connection Secret
apiVersion: v1
kind: Secret
metadata:
  name: database-secrets
  namespace: rev
  labels:
    app: rev
    component: database
    tier: data
type: Opaque
data:
  # PostgreSQL Connection
  postgres_host: <BASE64_ENCODED_POSTGRES_HOST>
  postgres_port: <BASE64_ENCODED_POSTGRES_PORT>
  postgres_database: <BASE64_ENCODED_POSTGRES_DATABASE>
  postgres_username: <BASE64_ENCODED_POSTGRES_USERNAME>
  postgres_password: <BASE64_ENCODED_POSTGRES_PASSWORD>
  postgres_ssl_mode: <BASE64_ENCODED_POSTGRES_SSL_MODE>
  
  # Redis Connection
  redis_host: <BASE64_ENCODED_REDIS_HOST>
  redis_port: <BASE64_ENCODED_REDIS_PORT>
  redis_password: <BASE64_ENCODED_REDIS_PASSWORD>
  redis_database: <BASE64_ENCODED_REDIS_DATABASE>

---
# Model Access Secrets
apiVersion: v1
kind: Secret
metadata:
  name: model-secrets
  namespace: rev
  labels:
    app: rev
    component: models
    tier: ai
type: Opaque
data:
  # Model Repository Access
  huggingface_token: <BASE64_ENCODED_HUGGINGFACE_TOKEN>
  model_registry_username: <BASE64_ENCODED_MODEL_REGISTRY_USERNAME>
  model_registry_password: <BASE64_ENCODED_MODEL_REGISTRY_PASSWORD>
  
  # Model Encryption Keys
  model_encryption_key: <BASE64_ENCODED_MODEL_ENCRYPTION_KEY>
  checkpoint_signing_key: <BASE64_ENCODED_CHECKPOINT_SIGNING_KEY>

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app: monitoring
    component: secrets
    tier: monitoring
type: Opaque
data:
  # Prometheus Configuration
  prometheus_config: <BASE64_ENCODED_PROMETHEUS_CONFIG>
  prometheus_storage_encryption_key: <BASE64_ENCODED_PROMETHEUS_ENCRYPTION_KEY>
  
  # Grafana Configuration
  grafana_admin_username: <BASE64_ENCODED_GRAFANA_ADMIN_USERNAME>
  grafana_admin_password: <BASE64_ENCODED_GRAFANA_ADMIN_PASSWORD>
  grafana_secret_key: <BASE64_ENCODED_GRAFANA_SECRET_KEY>
  grafana_database_password: <BASE64_ENCODED_GRAFANA_DB_PASSWORD>
  
  # Jaeger Configuration
  jaeger_sampling_strategies: <BASE64_ENCODED_JAEGER_SAMPLING_STRATEGIES>
  jaeger_ui_config: <BASE64_ENCODED_JAEGER_UI_CONFIG>

---
# External Service Secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-service-secrets
  namespace: rev
  labels:
    app: rev
    component: external-apis
    tier: integration
type: Opaque
data:
  # Cloud Provider Credentials
  aws_access_key_id: <BASE64_ENCODED_AWS_ACCESS_KEY_ID>
  aws_secret_access_key: <BASE64_ENCODED_AWS_SECRET_ACCESS_KEY>
  gcp_service_account_key: <BASE64_ENCODED_GCP_SERVICE_ACCOUNT_KEY>
  
  # Message Queue Credentials
  rabbitmq_username: <BASE64_ENCODED_RABBITMQ_USERNAME>
  rabbitmq_password: <BASE64_ENCODED_RABBITMQ_PASSWORD>
  kafka_sasl_username: <BASE64_ENCODED_KAFKA_SASL_USERNAME>
  kafka_sasl_password: <BASE64_ENCODED_KAFKA_SASL_PASSWORD>
  
  # Third-party Service Keys
  stripe_api_key: <BASE64_ENCODED_STRIPE_API_KEY>
  sendgrid_api_key: <BASE64_ENCODED_SENDGRID_API_KEY>
  webhook_signing_secret: <BASE64_ENCODED_WEBHOOK_SIGNING_SECRET>

---
# Kubernetes Service Account Token Secret (for RBAC)
apiVersion: v1
kind: Secret
metadata:
  name: rev-serviceaccount-token
  namespace: rev
  labels:
    app: rev
    component: rbac
    tier: security
  annotations:
    kubernetes.io/service-account.name: rev-service-account
type: kubernetes.io/service-account-token
data:
  # This will be automatically populated by Kubernetes
  token: <KUBERNETES_GENERATED_TOKEN>
  ca.crt: <KUBERNETES_GENERATED_CA_CERT>
  namespace: <KUBERNETES_GENERATED_NAMESPACE>

---
# Secret for Registry Pull Credentials (if using private container registry)
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: rev
  labels:
    app: rev
    component: registry
    tier: infrastructure
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <BASE64_ENCODED_DOCKER_CONFIG_JSON>
  # Example of docker config:
  # {
  #   "auths": {
  #     "your-registry.com": {
  #       "username": "your-username",
  #       "password": "your-password",
  #       "auth": "base64-encoded-username:password"
  #     }
  #   }
  # }

---
# Encryption Key Secret (for data at rest encryption)
apiVersion: v1
kind: Secret
metadata:
  name: encryption-keys
  namespace: rev
  labels:
    app: rev
    component: encryption
    tier: security
type: Opaque
data:
  # Application-level encryption keys
  data_encryption_key: <BASE64_ENCODED_DATA_ENCRYPTION_KEY>
  backup_encryption_key: <BASE64_ENCODED_BACKUP_ENCRYPTION_KEY>
  log_encryption_key: <BASE64_ENCODED_LOG_ENCRYPTION_KEY>
  
  # Cryptographic keys for ZK proofs and homomorphic encryption
  zk_proof_key: <BASE64_ENCODED_ZK_PROOF_KEY>
  homomorphic_private_key: <BASE64_ENCODED_HOMOMORPHIC_PRIVATE_KEY>
  homomorphic_public_key: <BASE64_ENCODED_HOMOMORPHIC_PUBLIC_KEY>